#lang gibbon

(data List
      [Nil]
      [Cons Int List])

(define (build-list [n : Int]) : List
  (if (= n 0)
      (Nil)
      (Cons n (build-list (- n 1)))))

(define (sum-list [xs : List]) : Int
  (case xs
    [(Nil) 0]
    [(Cons y ys) (+ y (sum-list ys))]))

(define (reverse [xs : List] [ys : List]) : List
  (case xs
    [(Nil) ys]
    [(Cons z zs) (reverse zs (Cons z ys))]))

(let ([xs : List (Cons 1 (Cons 2 (Cons 3 (Nil))))])
  (let ([ys : List (reverse xs (Nil))])
    (sum-list ys)))
