#lang gibbon

(data Tree
      [Null]
      [Leaf Int]
      [Node Int Tree Tree])

;; (define (buildtree [n : Int]) : Tree
;;   (helper 0 (- n 1)))

(define (helper [s : Int] [e : Int]) : Tree
  (if (< e s)
      (Null)
      (if (= s e)
          (Leaf s)
          (let ([m : Int (+ (div (- e s) 2) s)])
            (Node m (helper s (- m 1))
                  (helper (+ m 1) e))))))

(define (sum-tree [tr : Tree]) : Int
  (case tr
    [(Null) 0]
    [(Leaf n) n]
    [(Node n l r) (+ n (+ (sum-tree l) (sum-tree r)))]))

(define (tree-insert [tr : Tree] [n : Int]) : Tree
  (case tr
    [(Null)        (Leaf n)]
    [(Leaf n1)     (if (< n n1)
                       (Node n1 (Leaf n) (Null))
                       (Node n1 (Null) (Leaf n)))]
    [(Node n1 l r) (if (< n1 n)
                       (Node n1 l (tree-insert r n))
                       (Node n1 (tree-insert l n) r))]))

(define (loop [tr : Tree] [n : Int]) : Tree
  (if (= n 0)
      tr
      (let ([j : Int (mod (rand) 100)])
        (loop (tree-insert tr j) (- n 1)))))

(let ([m : Int (size-param)])
  ;; (2 ^ (n+1)) - 1
  (let ([total-nodes : Int (- (exp 2 (+ (size-param) 1)) 1)])
    (let ([tr0 : Tree (helper 0 total-nodes)])
      (let ([tr1 : Tree (iterate (loop tr0 1000))])
        (sum-tree tr1)))))
